[{"content":"Markdownify box This is boxmd shortcode Simple box This is **box** shortcode\r Code tabs Make it easy to switch between different code\njava\rjavascript\r\r1  System.out.println(\u0026#39;Hello World!\u0026#39;);\r  \r\r1  console.log(\u0026#39;Hello World!\u0026#39;);\r  \r\r\r\r'use strict';\rvar containerId = JSON.parse(\"\\\"c3a7395d19726e47\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar codetabLinks = null;\rvar codetabContents = null;\rvar ids = [];\rif (containerElem) {\rcodetabLinks = containerElem.querySelectorAll('.codetab__link');\rcodetabContents = containerElem.querySelectorAll('.codetab__content');\r}\rfor (var i = 0; i 0) {\rcodetabContents[0].style.display = 'block';\r}\r Tabs for general purpose Windows\rMacOS\rUbuntu\r\rWindows section 1  console.log(\u0026#39;Hello World!\u0026#39;);\r  ⚠️Becareful that the content in the tab should be different from each other. The tab makes unique id hashes depending on the tab contents. So, If you just copy-paste the tabs with multiple times, since it has the same contents, the tab will not work.\n\rMacOS section Hello world!\r\rUbuntu section Great!\r\r\r\r'use strict';\rvar containerId = JSON.parse(\"\\\"5c92b60c8ec7870a\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar tabLinks = null;\rvar tabContents = null;\rvar ids = [];\rif (containerElem) {\rtabLinks = containerElem.querySelectorAll('.tab__link');\rtabContents = containerElem.querySelectorAll('.tab__content');\r}\rfor (var i = 0; i 0) {\rtabContents[0].style.display = 'block';\r}\r Expand \r\rExpand me\r\rTitle contents\r\r \r\rExpand me2\r\rTitle2 contents2\r\r Alert Colored box\nthis is a text\rthis is a text\rthis is a text\rthis is a text\rNotice success text\r info text\r warning text\r error text\r ","description":"tabs, code-tabs, expand, alert, warning, notice, img, box","id":0,"section":"posts","tags":["shortcode"],"title":"Shortcodes","uri":"http://lx34r.coding.me/posts/shortcodes/"},{"content":"Code Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nMore about tuning syntax highlighting is the Hugo documentation.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39;\r--- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39;\r***************\r*** 1 ****\r! This is a line.\r--- 1 ---\r! This is a replacement line.\rIt is important to spell\r-removed line\r+new line\r  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39;\r--- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39;\r***************\r*** 1 ****\r! This is a line.\r--- 1 ---\r! This is a replacement line.\rIt is important to spell\r-removed line\r+new line\rMakefile CC=gcc\rCFLAGS=-I.\rhellomake: hellomake.o hellofunc.o\r$(CC) -o hellomake hellomake.o hellofunc.o -I.\r1 2 3 4 5  CC=gcc\rCFLAGS=-I.\rhellomake: hellomake.o hellofunc.o\r$(CC) -o hellomake hellomake.o hellofunc.o -I.\r  JSON 1 2 3  {\u0026#34;employees\u0026#34;:[\r{\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;},\r]}\r  Markdown 1 2 3  **bold** *italics* [link](www.example.com)\r  JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);\r  CSS 1 2 3  body {\rbackground-color: red;\r}\r  Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt;\r\rint main (void)\r{\rprintf (\u0026#34;Hello world!\\n\u0026#34;);\r}\r  Python 1  print \u0026#34;Hello, world!\u0026#34;\r  XML 1 2 3 4 5  \u0026lt;employees\u0026gt;\r\u0026lt;employee\u0026gt;\r\u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt;\r\u0026lt;/employee\u0026gt;\r\u0026lt;/employees\u0026gt;\r  Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;\r  Bash 1  echo \u0026#34;Hello World\u0026#34;\r  PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;   CoffeeScript 1  console.log(“Hello world!”);\r  C# 1 2 3 4 5 6 7 8  using System;\rclass Program\r{\rpublic static void Main(string[] args)\r{\rConsole.WriteLine(\u0026#34;Hello, world!\u0026#34;);\r}\r}\r  C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt;\r\rmain()\r{\rcout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;;\rreturn 0;\r}\r  SQL 1 2  SELECT column_name,column_name\rFROM table_name;\r  Go 1 2 3 4 5  package main\rimport \u0026#34;fmt\u0026#34;\rfunc main() {\rfmt.Println(\u0026#34;Hello, 世界\u0026#34;)\r}\r  Ruby 1  puts \u0026#34;Hello, world!\u0026#34;\r  Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame\rimport javax.swing.JLabel; //Importing class JLabel\rpublic class HelloWorld {\rpublic static void main(String[] args) {\rJFrame frame = new JFrame(); //Creating frame\r frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame\r frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame\r frame.pack(); //Setting size to smallest\r frame.setLocationRelativeTo(null); //Centering frame\r frame.setVisible(true); //Showing frame\r }\r}\r  Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).\r  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;;\rconst ANSWER = 42;\rclass Car extends Vehicle {\rconstructor(speed, cost) {\rsuper(speed);\rvar c = Symbol(\u0026#39;cost\u0026#39;);\rthis[c] = cost;\rthis.intro = `This is a car runs at\r${speed}.`;\r}\r}\rfor (let num of [1, 2, 3]) {\rconsole.log(num + 0b111110111);\r}\rfunction $initHighlight(block, flags) {\rtry {\rif (block.className.search(/\\bno\\-highlight\\b/) != -1)\rreturn processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;;\r} catch (e) {\r/* handle exception */\rvar e4x =\r\u0026lt;div\u0026gt;Example\r\u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;;\r }\rfor (var i = 0 / 2; i \u0026lt; classes.length; i++) {\r// \u0026#34;0 / 2\u0026#34; should not be parsed as regexp\r if (checkCondition(classes[i]) === undefined)\rreturn /\\d+[\\s/]/g;\r}\rconsole.log(Array.every(classes, Boolean));\r}\rexport $initHighlight;\r  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt;\r\u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /*********************************************************\r* General\r*/\rpre[class*=\u0026#34;language-\u0026#34;],\rcode {\rcolor: #5c6e74;\rfont-size: 13px;\rtext-shadow: none;\rfont-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace;\rdirection: ltr;\rtext-align: left;\rwhite-space: pre;\rword-spacing: normal;\rword-break: normal;\rline-height: 1.5;\rtab-size: 4;\rhyphens: none;\r}\rpre[class*=\u0026#34;language-\u0026#34;]::selection,\rcode::selection {\rtext-shadow: none;\rbackground: #b3d4fc;\r}\r@media print {\rpre[class*=\u0026#34;language-\u0026#34;],\rcode {\rtext-shadow: none;\r}\r}\rpre[class*=\u0026#34;language-\u0026#34;] {\rpadding: 1em;\rmargin: .5em 0;\roverflow: auto;\rbackground: #f8f5ec;\r}\r:not(pre) \u0026gt; code {\rpadding: .1em .3em;\rborder-radius: .3em;\rcolor: #db4c69;\rbackground: #f9f2f4;\r}\r  ","description":"Syntax highlighting test","id":1,"section":"posts","tags":["hugo"],"title":"Syntax highlighting","uri":"http://lx34r.coding.me/posts/syntax-highlight/"},{"content":"\r\rKnow yourself and be yourself!\r\r 纽约时间比加州时间早三个小时，\nNew York is 3 hours ahead of California,\n但加州时间并没有变慢。\nbut it does not make California slow.\n有人22岁就毕业了，\nSomeone graduated at the age of 22,\n但等了五年才找到好的工作！\nbut waited 5 years before securing a good job!\n有人25岁就当上CEO，\nSomeone became a CEO at 25,\n却在50岁去世。\nand died at 50.\n也有人迟到50岁才当上CEO，\nWhile another became a CEO at 50,\n然后活到90岁。\nand lived to 90 years.\n有人依然单身，\nSomeone is still single,\n同时也有人已婚。\nwhile someone else got married.\n欧巴马55岁就退休，\nObama retires at 55,\n川普70岁才开始当总统。\nbut Trump starts at 70.\n世上每个人本来就有自己的发展时区。\nAbsolutely everyone in this world works based on their Time Zone.\n身边有些人看似走在你前面，\nPeople around you might seem to go ahead of you,\n也有人看似走在你后面。\nsome might seem to be behind you.\n但其实每个人在自己的时区有自己的步程。\nBut everyone is running their own RACE, in their own TIME.\n不用嫉妒或嘲笑他们。\nDon’t envy them or mock them.\n他们都在自己的时区里，你也是！\nThey are in their TIME ZONE, and you are in yours!\n生命就是等待正确的行动时机。\nLife is about waiting for the right moment to act.\n所以，放轻松。\nSo, RELAX.\n你没有落后。\nYou’re not LATE.\n你没有领先。\nYou’re not EARLY.\n在命运为你安排的属于自己的时区里，一切都准时。\nYou are very much ON TIME, and in your TIME ZONE Destiny set up for you.\n \r Expectations 二十而立\n三十不惑\n四十知天命\n五十耳顺\n六十从心所欲\nBlog Timeline  2020.04.01：将博客迁移至Hugo+Zzo theme。 2018.05.10：使用Hexo+NEXT theme搭建个人博客。  ","description":"你曾经也是第一名啊。","id":2,"section":"","tags":null,"title":"About","uri":"http://lx34r.coding.me/about/"},{"content":"\rImage4:\rImage description\r\r\r0x000  写在前面  {% note info %} Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。{% endnote %}\n参考：Hexo-Github地址 Hexo帮助文档\n0x001  环境搭建  安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n Node.js (Should be at least nodejs 6.9) Git  如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\nnpm install -g hexo-cli\r\n如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\rMac 用户\n您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -\u0026gt; Download -\u0026gt; Command Line Tools -\u0026gt; Install 安装命令行工具。\n安装 Git    Windows：下载并安装 git.\n  Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。\n  Linux (Ubuntu, Debian)：sudo apt-get install git-core\n  Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n  Windows 用户\n由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考这个页面，收录了存储于百度云的下载地址。\n安装 Node.js  安装 Node.js 的最佳方式是使用 nvm。\ncURL:\n$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\rWget:\n$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh\r安装完成后，重启终端并执行下列命令即可安装 Node.js。\n$ nvm install stable\r或者您也可以下载 安装程序 来安装。\n安装好之后，Win+R 打开命令提示符，输入 node -v 和 npm -v ，如果出现版本号，那么就安装好了。\n\r----------\rWindows 用户\n对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n创建 Github 仓库  打开 https://github.com ，新建一个项目，输入自己的项目名字，后面一定要加 .github.io 后缀，必须是你的 Github 账号名(唯一)+.github.io ，如下图所示。\n\r发布后就可以通过 `https://yourname.github.io` 访问你建好的网站了\r安装 Hexo  在合适的地方新建一个文件夹，用来存放自己的博客文件，如 blog ，然后进入 blog 文件夹右击 Git Bash Here ，打开 git 的控制台窗口，之后我们所有的操作都在 git 控制台中进行。\n执行如何命令安装 Hexo：\nnpm install -g hexo-cli\r 安装完后输入 hexo -v 验证是否安装成功。\n然后初始化我们的网站，执行 init 命令初始化 hexo，命令：\nhexo init\r 至此，主要安装工作已经完成！ blog 就是你的博客根目录，所有操作都在里面进行。\n生成静态页面命令：\nhexo generate\r# 或者 hexo g\r 启动本地服务，进行文章预览调试，本地启动命令：\nhexo server\r# 或者 hexo s\r 然后在浏览器打开 http://localhost:4000/ ，就可以预览我们的原始博客了。\nctrl+c 可以关闭本地服务器。\n安装 Hexo连接 Github 与本地  首先，安装 hexo-deployer-git 插件，右键打开 git bash，然后输入下面命令：\nnpm install hexo-deployer-git --save\r 接着，添加 SSH key ，命令如下：\n git config --global user.name \u0026quot;\u0026lt;your_name\u0026gt;\u0026quot;\rgit config --global user.email \u0026quot;\u0026lt;your_email\u0026gt;\u0026quot;\rssh-keygen -t rsa -C \u0026quot;\u0026lt;your_email\u0026gt;\u0026quot;\r其中 \u0026lt;youe_name\u0026gt; 和 \u0026lt;your_email\u0026gt; 根据你注册 github 的信息自行更改。\n然后，打开 github ，在 settings 中点击 SSH and GPG keys ，新建一个 SSH，名字随意，比如 blog。复制密钥文件内容(路径形如C:\\Users\\Administrator\\.ssh\\id_rsa.pub)，粘贴至新建的 SSH 中。\n测试是否添加成功，在命令行依次输入以下命令，返回 “You’ve successfully authenticated” 即成功。\nssh -T git@github.com\ryes\r 最后，修改 _config.yml (在站点目录下)。在文件末尾修改为：\n # Deployment\r## Docs: https://hexo.io/docs/deployment.html\rdeploy:\r- type: git\rrepo: git@github.com:\u0026lt;Github账号名称\u0026gt;/\u0026lt;Github账号名称\u0026gt;.github.io.git\rbranch: master\r- type: git\rrepo: git@git.dev.tencent.com:\u0026lt;Coding账号名称\u0026gt;/\u0026lt;Coding账号名称\u0026gt;.git\rbranch: master\r0x002  写文章、发布文章  在博客根目录下右键打开 git，输入以下命令，新建一篇文章：\nhexo new post \u0026quot;article_title\u0026quot;\r# 或者 hexo n \u0026quot;article_title\u0026quot;\r 然后在 ..\\blog\\source\\_posts 目录中会发现你的文章文件，编写完 Markdown 文件后，输入 hexo g 生成静态网页，输入 hexo s 进行本地预览效果，最后部署至 github 上，命令如下：\nhexo deploy\r# 或者 hexo d\r 0x003  上传本地图片至blog  1、cd到博客根目录下 查看 _config.yml 文件 查找 post_asset_folder 字段确定post_asset_folder 设置为true -\u0026gt; post_asset_folder:true\n2、当您设置 post_asset_folder 参数后，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到此文件夹内，这样就可以更方便的使用资源。\n3、到博客的根目录下执行 npm install https://github.com/CodeFalling/hexo-asset-image --save 命令来进行插件的安装。\n4、然后创建一文章 hexo new \u0026quot;test\u0026quot; 然后查看博客的 ../source/_posts 目录下的文件，会看到存在一个test 文件夹 和 test.md 文件\n\r5、将所需要的图片资源放到 `test` 文件夹内目录结构如下：\r\r6、书写文章使用 `test` 文件内的图片\r\r7、使用`hexo s`命令运行本地博客如图\r\r8、使用以下命令将本地博客推送到远程，即可看到文章中的图片。\n hexo clean\rhexo g\rhexo d\r0x004  常用命令  init  $ hexo init [folder]\r 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。\nnew $ hexo new [layout] \u0026lt;title\u0026gt;\r 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。\n$ hexo new \u0026quot;post title with whitespace\u0026quot;\r generate $ hexo generate\r 生成静态文件。\n   选项 描述     -d, \u0026ndash;deploy 文件生成后立即部署网站   -w, \u0026ndash;watch 监视文件变动    该命令可以简写为\n$ hexo g\r publish $ hexo publish [layout] \u0026lt;filename\u0026gt;\r 发表草稿。\nserver $ hexo server\r 启动服务器。默认情况下，访问网址为： http://localhost:4000/。\n   选项 描述     -p, \u0026ndash;port 重设端口   -s, \u0026ndash;static 只使用静态文件   -l, \u0026ndash;log 启动日记记录，使用覆盖记录格式    deploy $ hexo deploy\r 部署网站。\n   参数 描述     -g, \u0026ndash;generate 部署之前预先生成静态文件    该命令可以简写为：\n$ hexo d\r render $ hexo render \u0026lt;file1\u0026gt; [file2] ...\r 渲染文件。\n   参数 描述     -o, \u0026ndash;output 设置输出路径    migrate $ hexo migrate \u0026lt;type\u0026gt;\r 从其他博客系统 迁移内容。\nclean $ hexo clean\r 清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\nlist $ hexo list \u0026lt;type\u0026gt;\r 列出网站资料。\nversion $ hexo version\r 显示 Hexo 版本。\n选项 安全模式 $ hexo --safe\r 在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n调试模式 $ hexo --debug\r 在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。\n简洁模式 $ hexo --silent\r 隐藏终端信息。\n自定义配置文件的路径 $ hexo --config custom.yml\r 自定义配置文件的路径，执行后将不再使用 _config.yml。\n显示草稿 $ hexo --draft\r 显示 source/_drafts 文件夹中的草稿文章。\n自定义 CWD $ hexo --cwd /path/to/cwd\r 自定义当前工作目录（Current working directory）的路径。\n","description":"","id":3,"section":"posts","tags":["Hexo","Blog"],"title":"Hexo+github搭建个人博客","uri":"http://lx34r.coding.me/posts/buildmyblog/"}]